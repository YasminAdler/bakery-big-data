version: '3.8'

x-airflow-common:
  &airflow-common
  build: .
  environment:
    &airflow-common-env
    AIRFLOW__CORE__EXECUTOR: LocalExecutor
    AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@postgres/airflow
    AIRFLOW__CORE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@postgres/airflow
    AIRFLOW__CORE__FERNET_KEY: 'Uf8nYHcvPYCa_FPcSB-1BFNZuNgTKqCCgAXUKoXLWFw='
    AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION: 'true'
    AIRFLOW__CORE__LOAD_EXAMPLES: 'false'
    AIRFLOW__API__AUTH_BACKENDS: 'airflow.api.auth.backend.basic_auth,airflow.api.auth.backend.session'
    AIRFLOW__SCHEDULER__ENABLE_HEALTH_CHECK: 'true'
    # Spark configuration
    SPARK_MASTER_URL: spark://spark-master:7077
    KAFKA_BOOTSTRAP_SERVERS: kafka:29092
    MINIO_ENDPOINT: http://minio:9000
    MINIO_ACCESS_KEY: minioadmin
    MINIO_SECRET_KEY: minioadmin
    _AIRFLOW_DB_UPGRADE: 'true'
    _AIRFLOW_WWW_USER_CREATE: 'true'
    _AIRFLOW_WWW_USER_USERNAME: 'airflow'
    _AIRFLOW_WWW_USER_PASSWORD: 'airflow'
  volumes:
    - airflow-logs:/opt/airflow/logs
    - /var/run/docker.sock:/var/run/docker.sock
    - ../makefile:/opt/airflow/makefile
    - ../streaming/docker-compose.yml:/opt/airflow/streaming/docker-compose.yml
    - ../processing/docker-compose.yml:/opt/airflow/processing/docker-compose.yml
    - .:/opt/airflow/orchestration
    - ./bakery_batch_etl.py:/opt/airflow/dags/bakery_batch_etl.py
    - ./bakery_csv_etl_pipeline.py:/opt/airflow/dags/bakery_csv_etl_pipeline.py
    - ./bakery_csv_manual_trigger.py:/opt/airflow/dags/bakery_csv_manual_trigger.py
    - ./bakery_init_infrastructure.py:/opt/airflow/dags/bakery_init_infrastructure.py
    - ./bakery_streaming_manager.py:/opt/airflow/dags/bakery_streaming_manager.py
  user: "root"
  depends_on:
    postgres:
      condition: service_healthy
  networks:
    - bakery-network

services:
  postgres:
    image: postgres:13
    container_name: airflow-postgres
    environment:
      POSTGRES_USER: airflow
      POSTGRES_PASSWORD: airflow
      POSTGRES_DB: airflow
    volumes:
      - postgres-db-volume:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "airflow"]
      interval: 10s
      retries: 5
      start_period: 5s
    restart: always
    networks:
      - bakery-network

  airflow-webserver:
    <<: *airflow-common
    container_name: airflow-webserver
    command: webserver
    ports:
      - "8081:8080"  # Host 8081 -> Container 8080 to avoid conflict with Spark UI
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: always

  airflow-scheduler:
    <<: *airflow-common
    container_name: airflow-scheduler
    command: scheduler
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8974/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: always

  airflow-init:
    <<: *airflow-common
    container_name: airflow-init
    entrypoint: /bin/bash
    command:
      - -c
      - |
        mkdir -p /sources/logs /sources/dags /sources/plugins
        chown -R "${AIRFLOW_UID}:0" /sources/{logs,dags,plugins}
        exec /entrypoint airflow version
    environment:
      <<: *airflow-common-env
      _AIRFLOW_DB_MIGRATE: 'true'
      _AIRFLOW_WWW_USER_CREATE: 'true'
      _AIRFLOW_WWW_USER_USERNAME: 'airflow'
      _AIRFLOW_WWW_USER_PASSWORD: 'airflow'
    user: "0:0"
    volumes:
      - airflow-logs:/sources/logs

  airflow-cli:
    <<: *airflow-common
    profiles:
      - debug
    environment:
      <<: *airflow-common-env
      CONNECTION_CHECK_MAX_COUNT: "0"
    command:
      - bash
      - -c
      - airflow

volumes:
  postgres-db-volume:
  airflow-logs:

networks:
  bakery-network:
    external: true
    name: bakery-network 