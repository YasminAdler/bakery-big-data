version: '3.8'

services:
  # Kafka Infrastructure
  zookeeper:
    image: confluentinc/cp-zookeeper:7.5.0
    hostname: zookeeper
    container_name: zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - bakery-network

  kafka:
    image: confluentinc/cp-kafka:7.5.0
    hostname: kafka
    container_name: kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
      - "29092:29092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
    networks:
      - bakery-network

  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: kafka-ui
    depends_on:
      - kafka
    ports:
      - "8081:8080"
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:29092
      KAFKA_CLUSTERS_0_ZOOKEEPER: zookeeper:2181
    networks:
      - bakery-network

  # Object Storage (MinIO for Iceberg)
  minio:
    image: minio/minio:latest
    container_name: minio
    ports:
      - "9000:9000"
      - "9001:9001"
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin
    command: server /data --console-address ":9001"
    volumes:
      - minio-data:/data
    networks:
      - bakery-network

  # Spark Master
  spark-master:
    image: bitnami/spark:3.5.0
    container_name: spark-master
    environment:
      - SPARK_MODE=master
      - SPARK_RPC_AUTHENTICATION_ENABLED=no
      - SPARK_RPC_ENCRYPTION_ENABLED=no
      - SPARK_LOCAL_STORAGE_ENCRYPTION_ENABLED=no
      - SPARK_SSL_ENABLED=no
    ports:
      - "8080:8080"
      - "7077:7077"
    volumes:
      - ./streaming/processors:/opt/spark-apps/streaming
      - ./etl:/opt/spark-apps/etl
      - ./jars:/opt/spark/jars
    networks:
      - bakery-network

  # Spark Worker
  spark-worker:
    image: bitnami/spark:3.5.0
    container_name: spark-worker
    environment:
      - SPARK_MODE=worker
      - SPARK_MASTER_URL=spark://spark-master:7077
      - SPARK_WORKER_MEMORY=2G
      - SPARK_WORKER_CORES=2
      - SPARK_RPC_AUTHENTICATION_ENABLED=no
      - SPARK_RPC_ENCRYPTION_ENABLED=no
      - SPARK_LOCAL_STORAGE_ENCRYPTION_ENABLED=no
      - SPARK_SSL_ENABLED=no
    depends_on:
      - spark-master
    networks:
      - bakery-network

  # Kafka Producers
  pos-producer:
    build:
      context: ./streaming/producers
      dockerfile: Dockerfile
    container_name: pos-producer
    depends_on:
      - kafka
    environment:
      KAFKA_BOOTSTRAP_SERVERS: kafka:29092
      PRODUCER_TYPE: pos
    command: python pos_producer.py
    networks:
      - bakery-network
    restart: on-failure 

  iot-producer:
    build:
      context: ./streaming/producers
      dockerfile: Dockerfile
    container_name: iot-producer
    depends_on:
      - kafka
    environment:
      KAFKA_BOOTSTRAP_SERVERS: kafka:29092
      PRODUCER_TYPE: iot
    command: python iot_producer.py
    networks:
      - bakery-network
    restart: on-failure

  inventory-producer:
    build:
      context: ./streaming/producers
      dockerfile: Dockerfile
    container_name: inventory-producer
    depends_on:
      - kafka
    environment:
      KAFKA_BOOTSTRAP_SERVERS: kafka:29092
      PRODUCER_TYPE: inventory
    command: python inventory_producer.py
    networks:
      - bakery-network
    restart: on-failure

  feedback-producer:
    build:
      context: ./streaming/producers
      dockerfile: Dockerfile
    container_name: feedback-producer
    depends_on:
      - kafka
    environment:
      KAFKA_BOOTSTRAP_SERVERS: kafka:29092
      PRODUCER_TYPE: feedback
    command: python feedback_producer.py
    networks:
      - bakery-network
    restart: on-failure

  batch-producer:
    build:
      context: ./streaming/producers
      dockerfile: Dockerfile
    container_name: batch-producer
    depends_on:
      - kafka
    environment:
      KAFKA_BOOTSTRAP_SERVERS: kafka:29092
      PRODUCER_TYPE: batch
    command: python batch_producer.py
    networks:
      - bakery-network
    restart: on-failure

  # Spark Streaming Processors
  pos-stream-processor:
    build:
      context: ./streaming/processors
      dockerfile: Dockerfile.spark
    container_name: pos-stream-processor
    depends_on:
      - spark-master
      - kafka
      - minio
    environment:
      SPARK_MASTER: spark://spark-master:7077
    command: spark-submit --master spark://spark-master:7077 --packages org.apache.iceberg:iceberg-spark-runtime-3.5_2.12:1.4.2,org.apache.spark:spark-sql-kafka-0-10_2.12:3.5.0 /app/pos_processor.py
    networks:
      - bakery-network
    restart: on-failure

  iot-stream-processor:
    build:
      context: ./streaming/processors
      dockerfile: Dockerfile.spark
    container_name: iot-stream-processor
    depends_on:
      - spark-master
      - kafka
      - minio
    environment:
      SPARK_MASTER: spark://spark-master:7077
    command: spark-submit --master spark://spark-master:7077 --packages org.apache.iceberg:iceberg-spark-runtime-3.5_2.12:1.4.2,org.apache.spark:spark-sql-kafka-0-10_2.12:3.5.0 /app/iot_processor.py
    networks:
      - bakery-network
    restart: on-failure

  feedback-stream-processor:
    build:
      context: ./streaming/processors
      dockerfile: Dockerfile.spark
    container_name: feedback-stream-processor
    depends_on:
      - spark-master
      - kafka
      - minio
    environment:
      SPARK_MASTER: spark://spark-master:7077
    command: spark-submit --master spark://spark-master:7077 --packages org.apache.iceberg:iceberg-spark-runtime-3.5_2.12:1.4.2,org.apache.spark:spark-sql-kafka-0-10_2.12:3.5.0 /app/feedback_processor.py
    networks:
      - bakery-network
    restart: on-failure

volumes:
  minio-data:

networks:
  bakery-network:
    external: true