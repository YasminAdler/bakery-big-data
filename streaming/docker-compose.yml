services:
  zookeeper:
    image: confluentinc/cp-zookeeper:7.5.0
    hostname: zookeeper
    container_name: zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - bakery-network

  kafka:
    image: confluentinc/cp-kafka:7.5.0
    hostname: kafka
    container_name: kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      # Simplified listener configuration
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
    networks:
      - bakery-network
      
  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: kafka-ui
    depends_on:
      - kafka
    ports:
      - "8081:8080"
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:9092
      KAFKA_CLUSTERS_0_ZOOKEEPER: zookeeper:2181
    networks:
      - bakery-network
      
  pos-producer:
    build:
      context: ./streaming/producers
      dockerfile: Dockerfile
    container_name: pos-producer
    depends_on:
      - kafka
    environment:
      KAFKA_BOOTSTRAP_SERVERS: kafka:9092
      PRODUCER_TYPE: pos
    command: python pos_producer.py
    networks:
      - bakery-network
    restart: on-failure 
      
  iot-producer:
    build:
      context: ./streaming/producers
      dockerfile: Dockerfile
    container_name: iot-producer
    depends_on:
      - kafka
    environment:
      KAFKA_BOOTSTRAP_SERVERS: kafka:9092
      PRODUCER_TYPE: iot
    command: python iot_producer.py
    networks:
      - bakery-network
    restart: on-failure  
      
  inventory-producer:
    build:
      context: ./streaming/producers
      dockerfile: Dockerfile
    container_name: inventory-producer
    depends_on:
      - kafka
    environment:
      KAFKA_BOOTSTRAP_SERVERS: kafka:9092
      PRODUCER_TYPE: inventory
    command: python inventory_producer.py
    networks:
      - bakery-network
    restart: on-failure  
      
  feedback-producer:
    build:
      context: ./streaming/producers
      dockerfile: Dockerfile
    container_name: feedback-producer
    depends_on:
      - kafka
    environment:
      KAFKA_BOOTSTRAP_SERVERS: kafka:9092
      PRODUCER_TYPE: feedback
    command: python feedback_producer.py
    networks:
      - bakery-network
    restart: on-failure 
      
  batch-producer:
    build:
      context: ./streaming/producers
      dockerfile: Dockerfile
    container_name: batch-producer
    depends_on:
      - kafka
    environment:
      KAFKA_BOOTSTRAP_SERVERS: kafka:9092
      PRODUCER_TYPE: batch
    command: python batch_producer.py
    networks:
      - bakery-network
    restart: on-failure  
      
networks:
  bakery-network:
    external: true